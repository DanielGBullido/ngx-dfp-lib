{"version":3,"sources":["ng://ngx-dfp/video/service/dfp-id-generator.service.ts","ng://ngx-dfp/video/directive/dfp-video.directive.ts","ng://ngx-dfp/video/dfp-video.module.ts"],"names":["DfpIDGeneratorService","prototype","generateID","type","id","Math","random","toString","slice","this","generatedIDs","dfpIDGenerator","element","tagName","toLowerCase","isTaken","isUnique","Injectable","DfpVideoDirective","platformId","elementRef","renderer","EventEmitter","ngOnInit","_this","isPlatformBrowser","el","nativeElement","contentPlayer","querySelector","setAttribute","width","height","adContainer","createElement","addClass","appendChild","loadImaSdk","then","setUpIMA","adActions","subscribe","act","play","pause","resume","adsDone","initialUserAction","loadAds","adsManager","adDisplayContainer","google","ima","AdDisplayContainer","adsLoader","AdsLoader","addEventListener","AdsManagerLoadedEvent","Type","ADS_MANAGER_LOADED","event","onAdsManagerLoaded","AdErrorEvent","AD_ERROR","onAdError","onended","contentEnded","initialize","load","requestAds","adTagUrl","adsRequest","AdsRequest","linearAdSlotWidth","linearAdSlotHeight","nonLinearAdSlotWidth","nonLinearAdSlotHeight","contentCompleteCalled","contentComplete","adsManagerLoadedEvent","adsRenderingSettings","AdsRenderingSettings","restoreCustomPlaybackStateOnAdBreakComplete","getAdsManager","startAdsManager","AdEvent","CONTENT_PAUSE_REQUESTED","onContentPauseRequested","CONTENT_RESUME_REQUESTED","onContentResumeRequested","ALL_ADS_COMPLETED","CLICK","COMPLETE","FIRST_QUARTILE","LOADED","MIDPOINT","PAUSED","STARTED","THIRD_QUARTILE","forEach","adEvent","onAdEvent","init","ViewMode","NORMAL","start","pauseForAd","resumeAfterAd","getAd","isLinear","adEvents","emit","adErrorEvent","destroy","adTag","Directive","args","selector","Object","decorators","Inject","PLATFORM_ID","ElementRef","Renderer2","Input","Output","DfpVideoModule","NgModule","declarations","exports","providers"],"mappings":"gZAAA,IAAAA,EAAA,0CAKyB,UAEvBA,EAAAC,UAAAC,WAAA,SAAWC,QAAA,IAAAA,IAAAA,EAAA,UACT,IAAIC,EAAK,KAET,EAAG,CAEDA,EAAKD,EAAO,IADGE,KAAKC,SAASC,WAAWC,MAAM,SAEvCJ,KAAMK,KAAKC,cAIpB,OAFAD,KAAKC,aAAaN,IAAM,EAEjBA,GAGTJ,EAAAC,UAAAU,eAAA,SAAeC,GACb,GAAIA,GAAWA,EAAQR,MAAQQ,EAAQR,MAAMK,KAAKC,cAChD,OAAOE,EAAQR,GAGjB,IAAMA,EAAKK,KAAKP,WAAWU,EAAQC,QAAQC,eAG3C,OAFIF,IAAWA,EAAQR,GAAKA,GAErBA,GAGTJ,EAAAC,UAAAc,QAAA,SAAQX,GACN,OAAOA,KAAMK,KAAKC,cAGpBV,EAAAC,UAAAe,SAAA,SAASZ,GACP,OAAQK,KAAKM,QAAQX,wBAlCxBa,EAAAA,eAFD,GCAAC,EAAA,WA6BE,SAAAA,EAC+BC,EACrBC,EACAC,EACAV,GAHqBF,KAAAU,WAAAA,EACrBV,KAAAW,WAAAA,EACAX,KAAAY,SAAAA,EACAZ,KAAAE,eAAAA,gBAfW,IAAIW,EAAAA,2BASP,SASlBJ,EAAAjB,UAAAsB,SAAA,WAAA,IAAAC,EAAAf,KACE,GAAIgB,EAAAA,kBAAkBhB,KAAKU,YAAa,CAEtC,IAAMO,EAAKjB,KAAKW,WAAWO,cAE3BlB,KAAKE,eAAeA,eAAee,GAEnCjB,KAAKmB,cAAgBF,EAAGG,cAAc,SACtCpB,KAAKY,SAASS,aAAarB,KAAKmB,cAAe,QAASnB,KAAKsB,MAAMxB,YACnEE,KAAKY,SAASS,aAAarB,KAAKmB,cAAe,SAAUnB,KAAKuB,OAAOzB,YAErEE,KAAKwB,YAAcP,EAAGG,cAAc,iBAC/BpB,KAAKwB,cACRxB,KAAKwB,YAAcxB,KAAKY,SAASa,cAAc,OAC/CzB,KAAKY,SAASc,SAAS1B,KAAKwB,YAAa,gBACzCxB,KAAKY,SAASe,YAAYV,EAAIjB,KAAKwB,cAIrCI,EAAAA,aAAaC,KAAK,WAAM,OAAAd,EAAKe,aAG7B9B,KAAK+B,UAAUC,UAAU,SAAAC,GACvB,OAAQA,GACN,IAAK,OACHlB,EAAKmB,OACL,MACF,IAAK,QACHnB,EAAKoB,QACL,MACF,IAAK,SACHpB,EAAKqB,cAOf3B,EAAAjB,UAAA0C,KAAA,WACOlC,KAAKqC,UACRrC,KAAKsC,oBACLtC,KAAKuC,UACLvC,KAAKqC,SAAU,IAInB5B,EAAAjB,UAAA2C,MAAA,WACMnC,KAAKwC,YACPxC,KAAKwC,WAAWL,SAIpB1B,EAAAjB,UAAA4C,OAAA,WACMpC,KAAKwC,YACPxC,KAAKwC,WAAWJ,UAIpB3B,EAAAjB,UAAAsC,SAAA,WAAA,IAAAf,EAAAf,KAEEA,KAAKyC,mBAAqB,IAAIC,OAAOC,IAAIC,mBAAmB5C,KAAKwB,YAAaxB,KAAKmB,eAEnFnB,KAAK6C,UAAY,IAAIH,OAAOC,IAAIG,UAAU9C,KAAKyC,oBAE/CzC,KAAK6C,UAAUE,iBACbL,OAAOC,IAAIK,sBAAsBC,KAAKC,mBACtC,SAAAC,GAAS,OAAApC,EAAKqC,mBAAmBD,KACjC,GACFnD,KAAK6C,UAAUE,iBACbL,OAAOC,IAAIU,aAAaJ,KAAKK,SAC7B,SAAAH,GAAS,OAAApC,EAAKwC,UAAUJ,KACxB,GAIFnD,KAAKmB,cAAcqC,QAAU,WAC3BzC,EAAK0C,iBAIThD,EAAAjB,UAAA8C,kBAAA,WACEtC,KAAKyC,mBAAmBiB,aACxB1D,KAAKmB,cAAcwC,QAGrBlD,EAAAjB,UAAAoE,WAAA,SAAWC,GACT,IAAMC,EAAa,IAAIpB,OAAOC,IAAIoB,WAClCD,EAAWD,SAAWA,EACtBC,EAAWE,kBAAoBhE,KAAKsB,MACpCwC,EAAWG,mBAAqBjE,KAAKuB,OACrCuC,EAAWI,qBAAuBlE,KAAKsB,MACvCwC,EAAWK,sBAAwBnE,KAAKuB,OACxCvB,KAAK6C,UAAUe,WAAWE,IAG5BrD,EAAAjB,UAAAiE,aAAA,WACEzD,KAAKoE,uBAAwB,EAC7BpE,KAAK6C,UAAUwB,mBAGjB5D,EAAAjB,UAAA4D,mBAAA,SAAmBkB,GACjB,IAAMC,EAAuB,IAAI7B,OAAOC,IAAI6B,qBAC5CD,EAAqBE,6CAA8C,EACnEzE,KAAKwC,WAAa8B,EAAsBI,cACtC1E,KAAKmB,cAAeoD,GACtBvE,KAAK2E,gBAAgB3E,KAAKwC,aAG5B/B,EAAAjB,UAAAmF,gBAAA,SAAgBnC,GAAhB,IAAAzB,EAAAf,KAEEwC,EAAWO,iBACTL,OAAOC,IAAIiC,QAAQ3B,KAAK4B,wBACxB,WAAM,OAAA9D,EAAK+D,4BACX,EACA9E,MACFwC,EAAWO,iBACTL,OAAOC,IAAIiC,QAAQ3B,KAAK8B,yBACxB,WAAM,OAAAhE,EAAKiE,6BACX,EACAhF,MAEFwC,EAAWO,iBACTL,OAAOC,IAAIU,aAAaJ,KAAKK,SAC7B,SAAAH,GAAS,OAAApC,EAAKwC,UAAUJ,KACxB,EACAnD,MACa,CAAC0C,OAAOC,IAAIiC,QAAQ3B,KAAKgC,kBACxCvC,OAAOC,IAAIiC,QAAQ3B,KAAKiC,MACxBxC,OAAOC,IAAIiC,QAAQ3B,KAAKkC,SACxBzC,OAAOC,IAAIiC,QAAQ3B,KAAKmC,eACxB1C,OAAOC,IAAIiC,QAAQ3B,KAAKoC,OACxB3C,OAAOC,IAAIiC,QAAQ3B,KAAKqC,SACxB5C,OAAOC,IAAIiC,QAAQ3B,KAAKsC,OACxB7C,OAAOC,IAAIiC,QAAQ3B,KAAKuC,QACxB9C,OAAOC,IAAIiC,QAAQ3B,KAAKwC,gBACjBC,QAAQ,SAAAvC,GACb,OAAAX,EAAWO,iBAAiBI,EAAO,SAAAwC,GAAW,OAAA5E,EAAK6E,UAAUD,KAAU,KAGzEnD,EAAWqD,KACT7F,KAAKsB,MACLtB,KAAKuB,OACLmB,OAAOC,IAAImD,SAASC,QAEtBvD,EAAWwD,SAGbvF,EAAAjB,UAAAsF,wBAAA,WACE9E,KAAKiG,cAGPxF,EAAAjB,UAAAwF,yBAAA,WAGOhF,KAAKoE,uBACRpE,KAAKkG,iBAITzF,EAAAjB,UAAAoG,UAAA,SAAUD,GACJA,EAAQjG,OAASgD,OAAOC,IAAIiC,QAAQ3B,KAAKoC,SAChCM,EAAQQ,QACXC,YACNpG,KAAKgF,4BAGThF,KAAKqG,SAASC,KAAKX,IAGrBlF,EAAAjB,UAAA+D,UAAA,SAAUgD,GACJvG,KAAKwC,YACPxC,KAAKwC,WAAWgE,UAElBxG,KAAKkG,gBACLlG,KAAKqG,SAASC,KAAKC,IAKrB9F,EAAAjB,UAAA0G,cAAA,WACElG,KAAKmB,cAAce,QAGrBzB,EAAAjB,UAAAyG,WAAA,WACEjG,KAAKmB,cAAcgB,SAGrB1B,EAAAjB,UAAA+C,QAAA,WACEvC,KAAK4D,WAAW5D,KAAKyG,4BAzNxBC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,yDAsBiCC,OAAMC,WAAA,CAAA,CAAApH,KAA9CqH,EAAAA,OAAMJ,KAAA,CAACK,EAAAA,sBA9B6BC,EAAAA,kBAAiDC,EAAAA,iBAKjF3H,oCAON4H,EAAAA,sBACAA,EAAAA,qBAEAA,EAAAA,yBACAA,EAAAA,wBAEAC,EAAAA,YAlBH,GCAAC,EAAA,oDAKCC,EAAAA,SAAQX,KAAA,CAAC,CACRY,aAAc,CACZ9G,GAEF+G,QAAS,CACP/G,GAEFgH,UAAW,CACTlI,SAbJ","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class DfpIDGeneratorService {\n\n  private generatedIDs = {};\n\n  generateID(type = 'dfp-ad') {\n    let id = null;\n\n    do {\n      const number = Math.random().toString().slice(2);\n      id = type + '-' + number;\n    } while (id in this.generatedIDs);\n\n    this.generatedIDs[id] = true;\n\n    return id;\n  }\n\n  dfpIDGenerator(element: HTMLElement) {\n    if (element && element.id && !(element.id in this.generatedIDs)) {\n      return element.id;\n    }\n\n    const id = this.generateID(element.tagName.toLowerCase());\n    if (element) { element.id = id; }\n\n    return id;\n  }\n\n  isTaken(id) {\n    return id in this.generatedIDs;\n  }\n\n  isUnique(id) {\n    return !this.isTaken(id);\n  }\n\n}\n","import { Directive, Inject, PLATFORM_ID, ElementRef, OnInit, Input, Output, EventEmitter, Renderer2 } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\nimport { loadImaSdk } from '@alugha/ima';\n\nimport { DfpIDGeneratorService } from '../service/dfp-id-generator.service';\n\n@Directive({\n  selector: 'dfp-video'\n})\nexport class DfpVideoDirective implements OnInit {\n\n  @Input() width: number;\n  @Input() height: number;\n\n  @Input() adTag: string;\n  @Input() adActions: EventEmitter<'play' | 'pause' | 'resume'>;\n\n  @Output() adEvents = new EventEmitter<any>();\n\n  contentPlayer: HTMLVideoElement;\n  adContainer: HTMLElement;\n\n  private contentCompleteCalled: boolean;\n  private adDisplayContainer: google.ima.AdDisplayContainer;\n  private adsLoader: google.ima.AdsLoader;\n  private adsManager: google.ima.AdsManager;\n  private adsDone = false;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: Object,\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private dfpIDGenerator: DfpIDGeneratorService\n  ) { }\n\n  ngOnInit() {\n    if (isPlatformBrowser(this.platformId)) {\n\n      const el = this.elementRef.nativeElement;\n\n      this.dfpIDGenerator.dfpIDGenerator(el);\n\n      this.contentPlayer = el.querySelector('video');\n      this.renderer.setAttribute(this.contentPlayer, 'width', this.width.toString());\n      this.renderer.setAttribute(this.contentPlayer, 'height', this.height.toString());\n\n      this.adContainer = el.querySelector('.ad-container');\n      if (!this.adContainer) {\n        this.adContainer = this.renderer.createElement('div');\n        this.renderer.addClass(this.adContainer, 'ad-container');\n        this.renderer.appendChild(el, this.adContainer);\n      }\n\n      // ima setup\n      loadImaSdk().then(() => this.setUpIMA());\n\n      // simple control\n      this.adActions.subscribe(act => {\n        switch (act) {\n          case 'play':\n            this.play();\n            break;\n          case 'pause':\n            this.pause();\n            break;\n          case 'resume':\n            this.resume();\n            break;\n        }\n      });\n    }\n  }\n\n  play() {\n    if (!this.adsDone) {\n      this.initialUserAction();\n      this.loadAds();\n      this.adsDone = true;\n    }\n  }\n\n  pause() {\n    if (this.adsManager) {\n      this.adsManager.pause();\n    }\n  }\n\n  resume() {\n    if (this.adsManager) {\n      this.adsManager.resume();\n    }\n  }\n\n  setUpIMA() {\n    // Create the ad display container.\n    this.adDisplayContainer = new google.ima.AdDisplayContainer(this.adContainer, this.contentPlayer);\n    // Create ads loader.\n    this.adsLoader = new google.ima.AdsLoader(this.adDisplayContainer);\n    // Listen and respond to ads loaded and error events.\n    this.adsLoader.addEventListener(\n      google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,\n      event => this.onAdsManagerLoaded(event),\n      false);\n    this.adsLoader.addEventListener(\n      google.ima.AdErrorEvent.Type.AD_ERROR,\n      event => this.onAdError(event),\n      false);\n\n    // An event listener to tell the SDK that our content video\n    // is completed so the SDK can play any post-roll ads.\n    this.contentPlayer.onended = () => {\n      this.contentEnded();\n    };\n  }\n\n  initialUserAction() {\n    this.adDisplayContainer.initialize();\n    this.contentPlayer.load();\n  }\n\n  requestAds(adTagUrl) {\n    const adsRequest = new google.ima.AdsRequest();\n    adsRequest.adTagUrl = adTagUrl;\n    adsRequest.linearAdSlotWidth = this.width;\n    adsRequest.linearAdSlotHeight = this.height;\n    adsRequest.nonLinearAdSlotWidth = this.width;\n    adsRequest.nonLinearAdSlotHeight = this.height;\n    this.adsLoader.requestAds(adsRequest);\n  }\n\n  contentEnded() {\n    this.contentCompleteCalled = true;\n    this.adsLoader.contentComplete();\n  }\n\n  onAdsManagerLoaded(adsManagerLoadedEvent) {\n    const adsRenderingSettings = new google.ima.AdsRenderingSettings();\n    adsRenderingSettings.restoreCustomPlaybackStateOnAdBreakComplete = true;\n    this.adsManager = adsManagerLoadedEvent.getAdsManager(\n      this.contentPlayer, adsRenderingSettings);\n    this.startAdsManager(this.adsManager);\n  }\n\n  startAdsManager(adsManager) {\n    // Attach the pause/resume events.\n    adsManager.addEventListener(\n      google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,\n      () => this.onContentPauseRequested(),\n      false,\n      this);\n    adsManager.addEventListener(\n      google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,\n      () => this.onContentResumeRequested(),\n      false,\n      this);\n    // Handle errors.\n    adsManager.addEventListener(\n      google.ima.AdErrorEvent.Type.AD_ERROR,\n      event => this.onAdError(event),\n      false,\n      this);\n    const events = [google.ima.AdEvent.Type.ALL_ADS_COMPLETED,\n    google.ima.AdEvent.Type.CLICK,\n    google.ima.AdEvent.Type.COMPLETE,\n    google.ima.AdEvent.Type.FIRST_QUARTILE,\n    google.ima.AdEvent.Type.LOADED,\n    google.ima.AdEvent.Type.MIDPOINT,\n    google.ima.AdEvent.Type.PAUSED,\n    google.ima.AdEvent.Type.STARTED,\n    google.ima.AdEvent.Type.THIRD_QUARTILE];\n    events.forEach(event =>\n      adsManager.addEventListener(event, adEvent => this.onAdEvent(adEvent), false)\n    );\n\n    adsManager.init(\n      this.width,\n      this.height,\n      google.ima.ViewMode.NORMAL);\n\n    adsManager.start();\n  }\n\n  onContentPauseRequested() {\n    this.pauseForAd();\n  }\n\n  onContentResumeRequested() {\n    // Without this check the video starts over from the beginning on a\n    // post-roll's CONTENT_RESUME_REQUESTED\n    if (!this.contentCompleteCalled) {\n      this.resumeAfterAd();\n    }\n  }\n\n  onAdEvent(adEvent) {\n    if (adEvent.type === google.ima.AdEvent.Type.LOADED) {\n      const ad = adEvent.getAd();\n      if (!ad.isLinear()) {\n        this.onContentResumeRequested();\n      }\n    }\n    this.adEvents.emit(adEvent);\n  }\n\n  onAdError(adErrorEvent) {\n    if (this.adsManager) {\n      this.adsManager.destroy();\n    }\n    this.resumeAfterAd();\n    this.adEvents.emit(adErrorEvent);\n  }\n\n  // application functions\n\n  resumeAfterAd() {\n    this.contentPlayer.play();\n  }\n\n  pauseForAd() {\n    this.contentPlayer.pause();\n  }\n\n  loadAds() {\n    this.requestAds(this.adTag);\n  }\n\n}\n","import { NgModule } from '@angular/core';\n\nimport { DfpIDGeneratorService } from './service/dfp-id-generator.service';\nimport { DfpVideoDirective } from './directive/dfp-video.directive';\n\n@NgModule({\n  declarations: [\n    DfpVideoDirective\n  ],\n  exports: [\n    DfpVideoDirective\n  ],\n  providers: [\n    DfpIDGeneratorService\n  ]\n})\nexport class DfpVideoModule {\n\n}\n"]}